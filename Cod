import os
import subprocess
import time
import requests

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TWITCH_USER_LOGIN = os.getenv("TWITCH_USER_LOGIN")
RCLONE_REMOTE = "gdrive"
RCLONE_FOLDER = "stream-recordings"

def send_telegram(text):
    requests.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", params={"chat_id": TELEGRAM_CHAT_ID, "text": text})

def get_access_token():
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        "client_id": TWITCH_CLIENT_ID,
        "client_secret": TWITCH_CLIENT_SECRET,
        "grant_type": "client_credentials"
    }
    response = requests.post(url, params=params)
    return response.json().get("access_token")

def is_live(access_token):
    url = f"https://api.twitch.tv/helix/streams?user_login={TWITCH_USER_LOGIN}"
    headers = {
        "Client-ID": TWITCH_CLIENT_ID,
        "Authorization": f"Bearer {access_token}"
    }
    response = requests.get(url, headers=headers)
    data = response.json()
    return len(data["data"]) > 0

def record_stream():
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    filename = f"recordings/{TWITCH_USER_LOGIN}_{timestamp}.mp4"
    send_telegram("Ð¡Ð¢Ð ÐÐ ÐÐÐ§ÐÐÐ¡Ð¯! ÐÐ°Ð¿Ð¸ÑÑ Ð¿Ð¾ÑÐ»Ð°.")
    subprocess.run(["streamlink", f"https://twitch.tv/{TWITCH_USER_LOGIN}", "best", "-o", filename])
    send_telegram("Ð¡ÑÑÐ¸Ð¼ Ð¾ÐºÐ¾Ð½ÑÐµÐ½. ÐÐ°Ð³ÑÑÐ¶Ð°Ñ Ð² Ð¾Ð±Ð»Ð°ÐºÐ¾...")
    subprocess.run(["rclone", "copy", filename, f"{RCLONE_REMOTE}:{RCLONE_FOLDER}"])
    send_telegram("ÐÐ°Ð³ÑÑÐ·ÐºÐ° Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð°! Ð¤Ð°Ð¹Ð» Ð² Google Drive.")

if __name__ == "__main__":
    token = get_access_token()
    while True:
        if is_live(token):
            record_stream()
            time.sleep(60)
        else:
            time.sleep(30)
